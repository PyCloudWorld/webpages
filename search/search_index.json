{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PyCloudWorld Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Home"},{"location":"#welcome-to-pycloudworld","text":"","title":"Welcome to PyCloudWorld"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"learning/azure/compute_resources/azure_containers/","text":"Azure Container Commands to install on ubuntu Update the package index sudo apt-get update Install packages to allow apt to use the repository over HTTPS sudo apt-get install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release Add Docker's official GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg Setup a stable repository echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null Update the package index sudo apt-get update Install docker, containerd sudo apt-get install docker-ce docker-ce-cli containerd.io Launching a container sudo docker run --name mynginx -p 80:80 -d nginx Docker command explanation sudo docker run --name mynginx -p 80:80 -d nginx nginx : docker image name mynginx : name of the container 80:80 : port that needs to be mapped Azure Container Registry this is the place where we save our images for the organisation. this will be a private repo to save the container images.","title":"Azure Containers"},{"location":"learning/azure/compute_resources/azure_containers/#azure-container","text":"","title":"Azure Container"},{"location":"learning/azure/compute_resources/azure_containers/#commands-to-install-on-ubuntu","text":"Update the package index sudo apt-get update Install packages to allow apt to use the repository over HTTPS sudo apt-get install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release Add Docker's official GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg Setup a stable repository echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null Update the package index sudo apt-get update Install docker, containerd sudo apt-get install docker-ce docker-ce-cli containerd.io Launching a container sudo docker run --name mynginx -p 80:80 -d nginx","title":"Commands to install on ubuntu"},{"location":"learning/azure/compute_resources/azure_containers/#docker-command-explanation","text":"sudo docker run --name mynginx -p 80:80 -d nginx nginx : docker image name mynginx : name of the container 80:80 : port that needs to be mapped","title":"Docker command explanation"},{"location":"learning/azure/compute_resources/azure_containers/#azure-container-registry","text":"this is the place where we save our images for the organisation. this will be a private repo to save the container images.","title":"Azure Container Registry"},{"location":"learning/azure/virtual_networking/cidr_notation/","text":"CIDR Notation Commands to install on ubuntu nginx : docker image name mynginx : name of the container 80:80 : port that needs to be mapped Update the package index sudo apt-get update","title":"CIDR Notation"},{"location":"learning/azure/virtual_networking/cidr_notation/#cidr-notation","text":"","title":"CIDR Notation"},{"location":"learning/azure/virtual_networking/cidr_notation/#commands-to-install-on-ubuntu","text":"nginx : docker image name mynginx : name of the container 80:80 : port that needs to be mapped Update the package index sudo apt-get update","title":"Commands to install on ubuntu"},{"location":"programming/design_patterns/creational_design_patterns/singleton/","text":"Singleton CODE class SingletonMeta(type): _instances = {} def __call__(cls, *args, **kwargs): if cls not in cls._instances: instance = super().__call__(*args, **kwargs) cls._instances[cls] = instance return cls._instances[cls] class Singleton(metaclass=SingletonMeta): def some_business_logic(self): pass if __name__ == \"__main__\": s1 = Singleton() s2 = Singleton() if id(s1) == id(s2): print(\"Singleton works, both variables contain the same instance.\") else: print(\"Singleton failed, variables contain different instances.\")","title":"Singleton"},{"location":"programming/design_patterns/creational_design_patterns/singleton/#singleton","text":"","title":"Singleton"},{"location":"programming/design_patterns/creational_design_patterns/singleton/#code","text":"class SingletonMeta(type): _instances = {} def __call__(cls, *args, **kwargs): if cls not in cls._instances: instance = super().__call__(*args, **kwargs) cls._instances[cls] = instance return cls._instances[cls] class Singleton(metaclass=SingletonMeta): def some_business_logic(self): pass if __name__ == \"__main__\": s1 = Singleton() s2 = Singleton() if id(s1) == id(s2): print(\"Singleton works, both variables contain the same instance.\") else: print(\"Singleton failed, variables contain different instances.\")","title":"CODE"}]}