{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PyCloudWorld Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Home"},{"location":"#welcome-to-pycloudworld","text":"","title":"Welcome to PyCloudWorld"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"learning/azure/compute_resources/azure_containers/","text":"Azure Container Commands to install on ubuntu Update the package index sudo apt-get update Install packages to allow apt to use the repository over HTTPS sudo apt-get install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release Add Docker's official GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg Setup a stable repository echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null Update the package index sudo apt-get update Install docker, containerd sudo apt-get install docker-ce docker-ce-cli containerd.io Launching a container sudo docker run --name mynginx -p 80:80 -d nginx Docker command explanation sudo docker run --name mynginx -p 80:80 -d nginx nginx : docker image name mynginx : name of the container 80:80 : port that needs to be mapped Azure Container Registry this is the place where we save our images for the organisation. this will be a private repo to save the container images.","title":"Azure Containers"},{"location":"learning/azure/compute_resources/azure_containers/#azure-container","text":"","title":"Azure Container"},{"location":"learning/azure/compute_resources/azure_containers/#commands-to-install-on-ubuntu","text":"Update the package index sudo apt-get update Install packages to allow apt to use the repository over HTTPS sudo apt-get install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release Add Docker's official GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg Setup a stable repository echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null Update the package index sudo apt-get update Install docker, containerd sudo apt-get install docker-ce docker-ce-cli containerd.io Launching a container sudo docker run --name mynginx -p 80:80 -d nginx","title":"Commands to install on ubuntu"},{"location":"learning/azure/compute_resources/azure_containers/#docker-command-explanation","text":"sudo docker run --name mynginx -p 80:80 -d nginx nginx : docker image name mynginx : name of the container 80:80 : port that needs to be mapped","title":"Docker command explanation"},{"location":"learning/azure/compute_resources/azure_containers/#azure-container-registry","text":"this is the place where we save our images for the organisation. this will be a private repo to save the container images.","title":"Azure Container Registry"},{"location":"learning/azure/virtual_networking/application_security_group/","text":"Application Security Group Architecture of Application Security Group Create Application Security Group Add VMS to Application Security Group grant rules for Application Security Group in the Network Security Group (NSG)","title":"Application Security Group"},{"location":"learning/azure/virtual_networking/application_security_group/#application-security-group","text":"","title":"Application Security Group"},{"location":"learning/azure/virtual_networking/application_security_group/#architecture-of-application-security-group","text":"","title":"Architecture of Application Security Group"},{"location":"learning/azure/virtual_networking/application_security_group/#create-application-security-group","text":"","title":"Create Application Security Group"},{"location":"learning/azure/virtual_networking/application_security_group/#add-vms-to-application-security-group","text":"","title":"Add VMS to Application Security Group"},{"location":"learning/azure/virtual_networking/application_security_group/#grant-rules-for-application-security-group-in-the-network-security-group-nsg","text":"","title":"grant rules for Application Security Group in the Network Security Group (NSG)"},{"location":"learning/azure/virtual_networking/network_interface_n_cidr_notation/","text":"Network Interface & CIDR Notation CIDR fullform C - Classless ID - Inter-Domain R - Routing Network Interface IP basic concept IP basic concept convert IP number to 8 bit example: 192.0.2.0 `192 is less than 256 and greater than 128` : 256 128 64 32 16 8 4 2 : 0 1 0 0 0 0 0 0 192- 128 = 64 : 256 128 64 32 16 8 4 2 : 0 1 0 0 0 0 0 0 : 0 1 1 0 0 0 0 0 so 192 is 01100000 IP & Masking IP Number of host available IP masking shorthand IP host count IP having multiple Subnet Multiple interface on same VM or Server","title":"Network Interface & CIDR Notation"},{"location":"learning/azure/virtual_networking/network_interface_n_cidr_notation/#network-interface-cidr-notation","text":"","title":"Network Interface &amp; CIDR Notation"},{"location":"learning/azure/virtual_networking/network_interface_n_cidr_notation/#cidr-fullform","text":"C - Classless ID - Inter-Domain R - Routing","title":" CIDR fullform"},{"location":"learning/azure/virtual_networking/network_interface_n_cidr_notation/#network-interface","text":"","title":"Network Interface"},{"location":"learning/azure/virtual_networking/network_interface_n_cidr_notation/#ip-basic-concept","text":"","title":"IP basic concept"},{"location":"learning/azure/virtual_networking/network_interface_n_cidr_notation/#ip-basic-concept_1","text":"","title":"IP basic concept"},{"location":"learning/azure/virtual_networking/network_interface_n_cidr_notation/#convert-ip-number-to-8-bit","text":"example: 192.0.2.0 `192 is less than 256 and greater than 128` : 256 128 64 32 16 8 4 2 : 0 1 0 0 0 0 0 0 192- 128 = 64 : 256 128 64 32 16 8 4 2 : 0 1 0 0 0 0 0 0 : 0 1 1 0 0 0 0 0 so 192 is 01100000","title":"convert IP number to 8 bit"},{"location":"learning/azure/virtual_networking/network_interface_n_cidr_notation/#ip-masking","text":"","title":"IP &amp; Masking"},{"location":"learning/azure/virtual_networking/network_interface_n_cidr_notation/#ip-number-of-host-available","text":"","title":"IP Number of host available"},{"location":"learning/azure/virtual_networking/network_interface_n_cidr_notation/#ip-masking-shorthand","text":"","title":"IP masking shorthand"},{"location":"learning/azure/virtual_networking/network_interface_n_cidr_notation/#ip-host-count","text":"","title":"IP host count"},{"location":"learning/azure/virtual_networking/network_interface_n_cidr_notation/#ip-having-multiple-subnet","text":"","title":"IP having multiple Subnet"},{"location":"learning/azure/virtual_networking/network_interface_n_cidr_notation/#multiple-interface-on-same-vm-or-server","text":"","title":"Multiple interface on same VM or Server"},{"location":"learning/azure/virtual_networking/network_security_group/","text":"Network Security Group What is Network Security Group it's a firewall it is applied in Inbound and Outbound Rules only - Inbound port rules - Outbound port rules Where can NSG be attached which can be attached to - Subnet - Network Interface Where can NSG be attached which can be attached to - Subnet - Network Interface EXAMPLE which can be attached to - Subnet - Network Interface NSG Default Rules which cannot be deleted or modified Inbound Rules Outbound Rules While Creating rules in NSG, you can mention Private IP Address Reason : under network interface the IP public and private mapping is done unable pinging of vm in NSG","title":"Network Security Group"},{"location":"learning/azure/virtual_networking/network_security_group/#network-security-group","text":"","title":"Network Security Group"},{"location":"learning/azure/virtual_networking/network_security_group/#what-is-network-security-group","text":"it's a firewall it is applied in Inbound and Outbound Rules only - Inbound port rules - Outbound port rules","title":"What is Network Security Group"},{"location":"learning/azure/virtual_networking/network_security_group/#where-can-nsg-be-attached","text":"which can be attached to - Subnet - Network Interface","title":"Where can NSG be attached"},{"location":"learning/azure/virtual_networking/network_security_group/#where-can-nsg-be-attached_1","text":"which can be attached to - Subnet - Network Interface","title":"Where can NSG be attached"},{"location":"learning/azure/virtual_networking/network_security_group/#example","text":"which can be attached to - Subnet - Network Interface","title":"EXAMPLE"},{"location":"learning/azure/virtual_networking/network_security_group/#nsg-default-rules-which-cannot-be-deleted-or-modified","text":"Inbound Rules Outbound Rules","title":"NSG Default Rules which cannot be deleted or modified"},{"location":"learning/azure/virtual_networking/network_security_group/#while-creating-rules-in-nsg-you-can-mention-private-ip-address","text":"Reason : under network interface the IP public and private mapping is done","title":"While Creating rules in NSG, you can mention Private IP Address"},{"location":"learning/azure/virtual_networking/network_security_group/#unable-pinging-of-vm-in-nsg","text":"","title":"unable pinging of vm in NSG"},{"location":"learning/azure/virtual_networking/site-to-site/","text":"Site to Site Configuration a secure connection between an on-premise network and an Azure network via the Internet. On the on-premise side, you need to have a VPN device that can route traffic via the Internet onto the VPN gateway in Azure. The VPN device can be a hardware device like a Cisco router or a software device ( e.g Windows Server 2016 running Routing and Remote services). The VPN device needs to have a publically routable IP address. The subnets in your on-premise network must not overlap with the subnets in your Azure virtual network The Site-to-Site VPN connection uses an IPSec tunnel to encrypt the traffic. The VPN gateway resource you create in Azure is used to route encrypted traffic between your on-premise data center and your Azure virtual network. There are different SKU's for the Azure VPN gateway service. Each SKU has a different pricing and attributes associated with it Virtual Network can have many Address Space and Subnets high level lets start the installation step 1 : make the azure main_office_vnet, ip range as 10.0.0.0/16 and add create a vm step 2: create a GatewaySubnet step 3: create VM with no public IP in the main_office_vnet and in subnetA step 4 : create VPN Gateway to main_office_vnet to GatewaySubnet step 5: create on_premise_vnet with IP range 10.1.0.0/16 step 6: create 1 VM's. one for client machine and other as Routing VM step 7 : enable the Routing Service on the windows machine step 8: create Local Network Gateway in the main_office_network and give it details from the on_premise_vnet step 10: create a new connection in the VPN Gateway and connect the VPN with the local Network gateway step 11: on routermachice you need to tell the main_office_vnet vpn details to Demand-dial Interface. Completed. Connect to machine step 13: lets add another vnt network and add a vm step 14: add vnet peering between main to on-premise2 step 15: add the details of the new vnet to static Routes in the RoutingServer","title":"Site to Site VPN Connection"},{"location":"learning/azure/virtual_networking/site-to-site/#site-to-site-configuration","text":"a secure connection between an on-premise network and an Azure network via the Internet. On the on-premise side, you need to have a VPN device that can route traffic via the Internet onto the VPN gateway in Azure. The VPN device can be a hardware device like a Cisco router or a software device ( e.g Windows Server 2016 running Routing and Remote services). The VPN device needs to have a publically routable IP address. The subnets in your on-premise network must not overlap with the subnets in your Azure virtual network The Site-to-Site VPN connection uses an IPSec tunnel to encrypt the traffic. The VPN gateway resource you create in Azure is used to route encrypted traffic between your on-premise data center and your Azure virtual network. There are different SKU's for the Azure VPN gateway service. Each SKU has a different pricing and attributes associated with it","title":"Site to Site Configuration"},{"location":"learning/azure/virtual_networking/site-to-site/#virtual-network-can-have-many-address-space-and-subnets","text":"","title":"Virtual Network can have many Address Space and Subnets"},{"location":"learning/azure/virtual_networking/site-to-site/#high-level","text":"","title":"high level"},{"location":"learning/azure/virtual_networking/site-to-site/#lets-start-the-installation","text":"","title":"lets start the installation"},{"location":"learning/azure/virtual_networking/site-to-site/#step-1-make-the-azure-main_office_vnet-ip-range-as-1000016-and-add-create-a-vm","text":"","title":"step 1 : make the azure main_office_vnet, ip range as 10.0.0.0/16 and add create a vm"},{"location":"learning/azure/virtual_networking/site-to-site/#step-2-create-a-gatewaysubnet","text":"","title":"step 2: create a GatewaySubnet"},{"location":"learning/azure/virtual_networking/site-to-site/#step-3-create-vm-with-no-public-ip-in-the-main_office_vnet-and-in-subneta","text":"","title":"step 3: create VM with no public IP in the main_office_vnet and in subnetA"},{"location":"learning/azure/virtual_networking/site-to-site/#step-4-create-vpn-gateway-to-main_office_vnet-to-gatewaysubnet","text":"","title":"step 4 : create VPN Gateway to main_office_vnet to GatewaySubnet"},{"location":"learning/azure/virtual_networking/site-to-site/#step-5-create-on_premise_vnet-with-ip-range-1010016","text":"","title":"step 5: create on_premise_vnet with IP range 10.1.0.0/16"},{"location":"learning/azure/virtual_networking/site-to-site/#step-6-create-1-vms-one-for-client-machine-and-other-as-routing-vm","text":"","title":"step 6: create 1 VM's. one for client machine and other as Routing VM"},{"location":"learning/azure/virtual_networking/site-to-site/#step-7-enable-the-routing-service-on-the-windows-machine","text":"","title":"step 7 : enable the Routing Service on the windows machine"},{"location":"learning/azure/virtual_networking/site-to-site/#step-8-create-local-network-gateway-in-the-main_office_network-and-give-it-details-from-the-on_premise_vnet","text":"","title":"step 8: create Local Network Gateway in the main_office_network and give it details from the on_premise_vnet"},{"location":"learning/azure/virtual_networking/site-to-site/#step-10-create-a-new-connection-in-the-vpn-gateway-and-connect-the-vpn-with-the-local-network-gateway","text":"","title":"step 10:  create a new connection in the VPN Gateway and connect the VPN with the local Network gateway"},{"location":"learning/azure/virtual_networking/site-to-site/#step-11-on-routermachice-you-need-to-tell-the-main_office_vnet-vpn-details-to-demand-dial-interface","text":"","title":"step 11: on routermachice you need to tell the main_office_vnet vpn details to Demand-dial Interface."},{"location":"learning/azure/virtual_networking/site-to-site/#completed-connect-to-machine","text":"","title":"Completed. Connect to machine"},{"location":"learning/azure/virtual_networking/site-to-site/#step-13-lets-add-another-vnt-network-and-add-a-vm","text":"","title":"step 13: lets add another vnt network and add a vm"},{"location":"learning/azure/virtual_networking/site-to-site/#step-14-add-vnet-peering-between-main-to-on-premise2","text":"","title":"step 14: add vnet peering between main to on-premise2"},{"location":"learning/azure/virtual_networking/site-to-site/#step-15-add-the-details-of-the-new-vnet-to-static-routes-in-the-routingserver","text":"","title":"step 15: add the details of the new vnet to static Routes in the RoutingServer"},{"location":"learning/azure/virtual_networking/virtual_network/","text":"Virtual Network Virtual Network can have many Address Space and Subnets Cost of IP Addresses https://azure.microsoft.com/en-us/pricing/details/ip-addresses/ Create public IP address attaching the public IP address to the VM ip address cannot be directly attached to VM. its attached it Network interface which is attached to VM steps Attaching addition Network Interface to the VM first you need to create new Network Interface. you need to create this Network Interface in the same Virtual Network and Subnet where the VM exist. then you need to stop the VM. else it won't allow the attaching of the Network Interface","title":"Virtual Network"},{"location":"learning/azure/virtual_networking/virtual_network/#virtual-network","text":"","title":"Virtual Network"},{"location":"learning/azure/virtual_networking/virtual_network/#virtual-network-can-have-many-address-space-and-subnets","text":"","title":"Virtual Network can have many Address Space and Subnets"},{"location":"learning/azure/virtual_networking/virtual_network/#cost-of-ip-addresses","text":"https://azure.microsoft.com/en-us/pricing/details/ip-addresses/","title":"Cost of IP Addresses"},{"location":"learning/azure/virtual_networking/virtual_network/#create-public-ip-address","text":"","title":"Create public IP address"},{"location":"learning/azure/virtual_networking/virtual_network/#attaching-the-public-ip-address-to-the-vm","text":"ip address cannot be directly attached to VM. its attached it Network interface which is attached to VM steps","title":" attaching the public IP address to the VM"},{"location":"learning/azure/virtual_networking/virtual_network/#attaching-addition-network-interface-to-the-vm","text":"first you need to create new Network Interface. you need to create this Network Interface in the same Virtual Network and Subnet where the VM exist. then you need to stop the VM. else it won't allow the attaching of the Network Interface","title":"Attaching addition Network Interface to the VM"},{"location":"programming/design_patterns/creational_patterns/abstract_factory/","text":"Abstract Factory CODE from abc import ABC, abstractmethod class AbstractMobileUIFactory(ABC): @abstractmethod def create_story(self): pass @abstractmethod def upload_photo(self): pass class AndroidFactory(AbstractMobileUIFactory): def create_story(self): print(\"Inside AndroidFactory class\") AndroidCreateStory().story() def upload_photo(self): print(\"Inside AndroidFactory class\") AndroidUploadPhoto().photo() class IosFactory(AbstractMobileUIFactory): def create_story(self): print(\"Inside IosFactory class\") IosCreateStory().story() def upload_photo(self): print(\"Inside IosFactory class\") IosUploadPhoto().photo() class SymbianFactory(AbstractMobileUIFactory): def create_story(self): print(\"Inside SymbianFactory class\") SymbianCreateStory().story() def upload_photo(self): print(\"Inside SymbianFactory class\") SymbianUploadPhoto().photo() class AbstractCreateStory(ABC): @abstractmethod def story(self): pass class AndroidCreateStory(AbstractCreateStory): def story(self): print(\"[Android] Creating story on android platform.\") class IosCreateStory(AbstractCreateStory): def story(self): print(\"[IOS] Creating story on IOS platform.\") class SymbianCreateStory(AbstractCreateStory): def story(self): print(\"[Symbian] Ok boomer! Creating story on Symbian platform, while we can!!\") class AbstractUploadPhoto(ABC): @abstractmethod def photo(self): pass class AndroidUploadPhoto(AbstractUploadPhoto): def photo(self): print(\"[Android] Uploading photo on android platform.\") class IosUploadPhoto(AbstractUploadPhoto): def photo(self): print(\"[IOS] Uploading photo on IOS platform.\") class SymbianUploadPhoto(AbstractUploadPhoto): def photo(self): print(\"[Symbian] So you want us to upload petroglyph? Since we are backward compatible, why not! Uploading photo on Symbian platform\") class Application(): def get_factory(self, platform_type): factory = None if platform_type == \"Android\": factory = AndroidFactory() elif platform_type == \"IOS\": factory = IosFactory() elif platform_type == \"Symbian\": factory = SymbianFactory() else: print(\"ERROR: unknown platform type.\") return factory def create_story(self, factory=None): if not factory: print(\"factory object not passed\") factory.create_story() def upload_photo(self, factory=None): if not factory: print(\"factory object not passed\") factory.upload_photo() if __name__ == '__main__': app_object = Application() # in real world scenarios, instead of pass hardcoded platform type we can read platform type from config file. print(\"Running for Android platform...\") factory_object = app_object.get_factory(\"Android\") factory_object.create_story() factory_object.upload_photo() print(\"\\n\") print(\"Running for IOS platform...\") factory_object = app_object.get_factory(\"IOS\") factory_object.create_story() factory_object.upload_photo() print(\"\\n\") print(\"Running for Symbian platform...\") factory_object = app_object.get_factory(\"Symbian\") factory_object.create_story() factory_object.upload_photo() print(\"\\n\") Output.txt: Execution result Running for Android platform... Inside AndroidFactory class [Android] Creating story on android platform. Inside AndroidFactory class [Android] Uploading photo on android platform. Running for IOS platform... Inside IosFactory class [IOS] Creating story on IOS platform. Inside IosFactory class [IOS] Uploading photo on IOS platform. Running for Symbian platform... Inside SymbianFactory class [Symbian] Ok boomer! Creating story on Symbian platform, while we can!! Inside SymbianFactory class [Symbian] So you want us to upload petroglyph? Since we are backward compatible, why not! Uploading photo on Symbian platform```","title":"Abstract Factory"},{"location":"programming/design_patterns/creational_patterns/abstract_factory/#abstract-factory","text":"","title":"Abstract Factory"},{"location":"programming/design_patterns/creational_patterns/abstract_factory/#code","text":"from abc import ABC, abstractmethod class AbstractMobileUIFactory(ABC): @abstractmethod def create_story(self): pass @abstractmethod def upload_photo(self): pass class AndroidFactory(AbstractMobileUIFactory): def create_story(self): print(\"Inside AndroidFactory class\") AndroidCreateStory().story() def upload_photo(self): print(\"Inside AndroidFactory class\") AndroidUploadPhoto().photo() class IosFactory(AbstractMobileUIFactory): def create_story(self): print(\"Inside IosFactory class\") IosCreateStory().story() def upload_photo(self): print(\"Inside IosFactory class\") IosUploadPhoto().photo() class SymbianFactory(AbstractMobileUIFactory): def create_story(self): print(\"Inside SymbianFactory class\") SymbianCreateStory().story() def upload_photo(self): print(\"Inside SymbianFactory class\") SymbianUploadPhoto().photo() class AbstractCreateStory(ABC): @abstractmethod def story(self): pass class AndroidCreateStory(AbstractCreateStory): def story(self): print(\"[Android] Creating story on android platform.\") class IosCreateStory(AbstractCreateStory): def story(self): print(\"[IOS] Creating story on IOS platform.\") class SymbianCreateStory(AbstractCreateStory): def story(self): print(\"[Symbian] Ok boomer! Creating story on Symbian platform, while we can!!\") class AbstractUploadPhoto(ABC): @abstractmethod def photo(self): pass class AndroidUploadPhoto(AbstractUploadPhoto): def photo(self): print(\"[Android] Uploading photo on android platform.\") class IosUploadPhoto(AbstractUploadPhoto): def photo(self): print(\"[IOS] Uploading photo on IOS platform.\") class SymbianUploadPhoto(AbstractUploadPhoto): def photo(self): print(\"[Symbian] So you want us to upload petroglyph? Since we are backward compatible, why not! Uploading photo on Symbian platform\") class Application(): def get_factory(self, platform_type): factory = None if platform_type == \"Android\": factory = AndroidFactory() elif platform_type == \"IOS\": factory = IosFactory() elif platform_type == \"Symbian\": factory = SymbianFactory() else: print(\"ERROR: unknown platform type.\") return factory def create_story(self, factory=None): if not factory: print(\"factory object not passed\") factory.create_story() def upload_photo(self, factory=None): if not factory: print(\"factory object not passed\") factory.upload_photo() if __name__ == '__main__': app_object = Application() # in real world scenarios, instead of pass hardcoded platform type we can read platform type from config file. print(\"Running for Android platform...\") factory_object = app_object.get_factory(\"Android\") factory_object.create_story() factory_object.upload_photo() print(\"\\n\") print(\"Running for IOS platform...\") factory_object = app_object.get_factory(\"IOS\") factory_object.create_story() factory_object.upload_photo() print(\"\\n\") print(\"Running for Symbian platform...\") factory_object = app_object.get_factory(\"Symbian\") factory_object.create_story() factory_object.upload_photo() print(\"\\n\") Output.txt: Execution result Running for Android platform... Inside AndroidFactory class [Android] Creating story on android platform. Inside AndroidFactory class [Android] Uploading photo on android platform. Running for IOS platform... Inside IosFactory class [IOS] Creating story on IOS platform. Inside IosFactory class [IOS] Uploading photo on IOS platform. Running for Symbian platform... Inside SymbianFactory class [Symbian] Ok boomer! Creating story on Symbian platform, while we can!! Inside SymbianFactory class [Symbian] So you want us to upload petroglyph? Since we are backward compatible, why not! Uploading photo on Symbian platform```","title":"CODE"},{"location":"programming/design_patterns/creational_patterns/builder/","text":"Builder CODE from __future__ import annotations from abc import ABC, abstractmethod from typing import Any class Builder(ABC): @property @abstractmethod def product(self) -> None: pass @abstractmethod def produce_part_a(self) -> None: pass @abstractmethod def produce_part_b(self) -> None: pass @abstractmethod def produce_part_c(self) -> None: pass class ConcreteBuilder1(Builder): def __init__(self) -> None: self.reset() def reset(self) -> None: self._product = Product1() @property def product(self) -> Product1: product = self._product self.reset() return product def produce_part_a(self) -> None: self._product.add(\"PartA1\") def produce_part_b(self) -> None: self._product.add(\"PartB1\") def produce_part_c(self) -> None: self._product.add(\"PartC1\") class Product1(): def __init__(self) -> None: self.parts = [] def add(self, part: Any) -> None: self.parts.append(part) def list_parts(self) -> None: print(f\"Product parts: {', '.join(self.parts)}\", end=\"\") class Director: def __init__(self) -> None: self._builder = None @property def builder(self) -> Builder: return self._builder @builder.setter def builder(self, builder: Builder) -> None: self._builder = builder def build_minimal_viable_product(self) -> None: self.builder.produce_part_a() def build_full_featured_product(self) -> None: self.builder.produce_part_a() self.builder.produce_part_b() self.builder.produce_part_c() if __name__ == \"__main__\": director = Director() builder = ConcreteBuilder1() director.builder = builder print(\"Standard basic product: \") director.build_minimal_viable_product() builder.product.list_parts() print(\"\\n\") print(\"Standard full featured product: \") director.build_full_featured_product() builder.product.list_parts() print(\"\\n\") # Remember, the Builder pattern can be used without a Director class. print(\"Custom product: \") builder.produce_part_a() builder.produce_part_b() builder.product.list_parts() Output.txt: Execution result Standard basic product: Product parts: PartA1 Standard full featured product: Product parts: PartA1, PartB1, PartC1 Custom product: Product parts: PartA1, PartB1","title":"Builder"},{"location":"programming/design_patterns/creational_patterns/builder/#builder","text":"","title":"Builder"},{"location":"programming/design_patterns/creational_patterns/builder/#code","text":"from __future__ import annotations from abc import ABC, abstractmethod from typing import Any class Builder(ABC): @property @abstractmethod def product(self) -> None: pass @abstractmethod def produce_part_a(self) -> None: pass @abstractmethod def produce_part_b(self) -> None: pass @abstractmethod def produce_part_c(self) -> None: pass class ConcreteBuilder1(Builder): def __init__(self) -> None: self.reset() def reset(self) -> None: self._product = Product1() @property def product(self) -> Product1: product = self._product self.reset() return product def produce_part_a(self) -> None: self._product.add(\"PartA1\") def produce_part_b(self) -> None: self._product.add(\"PartB1\") def produce_part_c(self) -> None: self._product.add(\"PartC1\") class Product1(): def __init__(self) -> None: self.parts = [] def add(self, part: Any) -> None: self.parts.append(part) def list_parts(self) -> None: print(f\"Product parts: {', '.join(self.parts)}\", end=\"\") class Director: def __init__(self) -> None: self._builder = None @property def builder(self) -> Builder: return self._builder @builder.setter def builder(self, builder: Builder) -> None: self._builder = builder def build_minimal_viable_product(self) -> None: self.builder.produce_part_a() def build_full_featured_product(self) -> None: self.builder.produce_part_a() self.builder.produce_part_b() self.builder.produce_part_c() if __name__ == \"__main__\": director = Director() builder = ConcreteBuilder1() director.builder = builder print(\"Standard basic product: \") director.build_minimal_viable_product() builder.product.list_parts() print(\"\\n\") print(\"Standard full featured product: \") director.build_full_featured_product() builder.product.list_parts() print(\"\\n\") # Remember, the Builder pattern can be used without a Director class. print(\"Custom product: \") builder.produce_part_a() builder.produce_part_b() builder.product.list_parts() Output.txt: Execution result Standard basic product: Product parts: PartA1 Standard full featured product: Product parts: PartA1, PartB1, PartC1 Custom product: Product parts: PartA1, PartB1","title":"CODE"},{"location":"programming/design_patterns/creational_patterns/factory_method/","text":"f# Factory Method CODE from __future__ import annotations from abc import ABC, abstractmethod class Transport(ABC): @abstractmethod def cost(self) -> str: pass class RailTransport(Transport): def cost(self) -> str: return \"Rail Transport cost Rs 1000\" class AirTransport(Transport): def cost(self) -> str: return \"Air Transport cost Rs 4000\" class SeaTransport(Transport): def cost(self) -> str: return \"Sea Transport cost Rs 200\" class TransportFactory(): def create(self, typ): targetclass = typ.capitalize() return globals()[targetclass]() if __name__ == \"__main__\": transport_factory = TransportFactory() transports = ['airtransport', 'railtransport', 'seatransport'] for transport in transports: transport_obj = transport_factory.create(transport) if hasattr(transport_obj, \"cost\"): print(transport_obj.cost()) Output.txt: Execution result Air Transport cost Rs 4000 Rail Transport cost Rs 1000 Sea Transport cost Rs 200","title":"Factory Method"},{"location":"programming/design_patterns/creational_patterns/factory_method/#code","text":"from __future__ import annotations from abc import ABC, abstractmethod class Transport(ABC): @abstractmethod def cost(self) -> str: pass class RailTransport(Transport): def cost(self) -> str: return \"Rail Transport cost Rs 1000\" class AirTransport(Transport): def cost(self) -> str: return \"Air Transport cost Rs 4000\" class SeaTransport(Transport): def cost(self) -> str: return \"Sea Transport cost Rs 200\" class TransportFactory(): def create(self, typ): targetclass = typ.capitalize() return globals()[targetclass]() if __name__ == \"__main__\": transport_factory = TransportFactory() transports = ['airtransport', 'railtransport', 'seatransport'] for transport in transports: transport_obj = transport_factory.create(transport) if hasattr(transport_obj, \"cost\"): print(transport_obj.cost()) Output.txt: Execution result Air Transport cost Rs 4000 Rail Transport cost Rs 1000 Sea Transport cost Rs 200","title":"CODE"},{"location":"programming/design_patterns/creational_patterns/prototype/","text":"Prototype CODE import copy class Doors: def __init__(self, count: int = None): self.number_of_doors = count class Body: def __init__(self, color: str = None): self.color = color class Chasis: def __init__(self, number: str = None): self.number = number class Car: def __init__(self, name: str = None, door : Doors = None, body: Body = None, chasis: Chasis = None): self.name = name self.number_of_doors = door.number_of_doors self.body_color = body.color self.chasis_number = chasis.number def __str__(self): return str(self.name) def clone(self): return copy.deepcopy(self) bmw_doors = Doors(5) bmw_body = Body(\"black\") bmw_chasis = Chasis(\"ash24031986\") bmw = Car(name=\"BMW\", door=bmw_doors, body=bmw_body, chasis=bmw_chasis) bmw_new_model = bmw.clone()","title":"Prototype"},{"location":"programming/design_patterns/creational_patterns/prototype/#prototype","text":"","title":"Prototype"},{"location":"programming/design_patterns/creational_patterns/prototype/#code","text":"import copy class Doors: def __init__(self, count: int = None): self.number_of_doors = count class Body: def __init__(self, color: str = None): self.color = color class Chasis: def __init__(self, number: str = None): self.number = number class Car: def __init__(self, name: str = None, door : Doors = None, body: Body = None, chasis: Chasis = None): self.name = name self.number_of_doors = door.number_of_doors self.body_color = body.color self.chasis_number = chasis.number def __str__(self): return str(self.name) def clone(self): return copy.deepcopy(self) bmw_doors = Doors(5) bmw_body = Body(\"black\") bmw_chasis = Chasis(\"ash24031986\") bmw = Car(name=\"BMW\", door=bmw_doors, body=bmw_body, chasis=bmw_chasis) bmw_new_model = bmw.clone()","title":"CODE"},{"location":"programming/design_patterns/creational_patterns/singleton/","text":"Singleton CODE class SingletonMeta(type): _instances = {} def __call__(cls, *args, **kwargs): if cls not in cls._instances: instance = super().__call__(*args, **kwargs) cls._instances[cls] = instance return cls._instances[cls] class Singleton(metaclass=SingletonMeta): def some_business_logic(self): pass if __name__ == \"__main__\": s1 = Singleton() s2 = Singleton() if id(s1) == id(s2): print(\"Singleton works, both variables contain the same instance.\") else: print(\"Singleton failed, variables contain different instances.\")","title":"Singleton"},{"location":"programming/design_patterns/creational_patterns/singleton/#singleton","text":"","title":"Singleton"},{"location":"programming/design_patterns/creational_patterns/singleton/#code","text":"class SingletonMeta(type): _instances = {} def __call__(cls, *args, **kwargs): if cls not in cls._instances: instance = super().__call__(*args, **kwargs) cls._instances[cls] = instance return cls._instances[cls] class Singleton(metaclass=SingletonMeta): def some_business_logic(self): pass if __name__ == \"__main__\": s1 = Singleton() s2 = Singleton() if id(s1) == id(s2): print(\"Singleton works, both variables contain the same instance.\") else: print(\"Singleton failed, variables contain different instances.\")","title":"CODE"},{"location":"programming/design_patterns/structural_patterns/adapter/","text":"Adapter CODE class Car: def assign_driver(self, driver_name): print(f\"{driver_name} is driving the car\") class Motorcycle: def assign_rider(self, rider_name): print(f\"{rider_name} is riding the motorcycle\") class MotorcycleAdapter: def __init__(self, motorcycle): self.motorcycle = motorcycle def assign_driver(self, name): self.motorcycle.assign_rider(name) if __name__ == '__main__': car = Car() bike = Motorcycle() bike_adapter = MotorcycleAdapter(bike) bike_adapter.assign_driver(\"Robert\")","title":"Adapter"},{"location":"programming/design_patterns/structural_patterns/adapter/#adapter","text":"","title":"Adapter"},{"location":"programming/design_patterns/structural_patterns/adapter/#_1","text":"","title":""},{"location":"programming/design_patterns/structural_patterns/adapter/#_2","text":"","title":""},{"location":"programming/design_patterns/structural_patterns/adapter/#_3","text":"","title":""},{"location":"programming/design_patterns/structural_patterns/adapter/#_4","text":"","title":""},{"location":"programming/design_patterns/structural_patterns/adapter/#_5","text":"","title":""},{"location":"programming/design_patterns/structural_patterns/adapter/#code","text":"class Car: def assign_driver(self, driver_name): print(f\"{driver_name} is driving the car\") class Motorcycle: def assign_rider(self, rider_name): print(f\"{rider_name} is riding the motorcycle\") class MotorcycleAdapter: def __init__(self, motorcycle): self.motorcycle = motorcycle def assign_driver(self, name): self.motorcycle.assign_rider(name) if __name__ == '__main__': car = Car() bike = Motorcycle() bike_adapter = MotorcycleAdapter(bike) bike_adapter.assign_driver(\"Robert\")","title":"CODE"},{"location":"programming/design_patterns/structural_patterns/proxy/","text":"Proxy Problem Why would you want to control access to an object? Here is an example: you have a massive object that consumes a vast amount of system resources. You need it from time to time, but not always. You could implement lazy initialization: create this object only when it\u2019s actually needed. All of the object\u2019s clients would need to execute some deferred initialization code. Unfortunately, this would probably cause a lot of code duplication. Solution The Proxy pattern suggests that you create a new proxy class with the same interface as an original service object. Then you update your app so that it passes the proxy object to all of the original object\u2019s clients. Upon receiving a request from a client, the proxy creates a real service object and delegates all the work to it. But what\u2019s the benefit? If you need to execute something either before or after the primary logic of the class, the proxy lets you do this without changing that class. Since the proxy implements the same interface as the original class, it can be passed to any client that expects a real service object. CODE from abc import ABC, abstractmethod class Subject(ABC): @abstractmethod def request(self) -> None: pass class RealSubject(Subject): def request(self) -> None: print(\"RealSubject: Handling request.\") class Proxy(Subject): def __init__(self, real_subject: RealSubject) -> None: self._real_subject = real_subject def request(self) -> None: if self.check_access(): self._real_subject.request() self.log_access() def check_access(self) -> bool: print(\"Proxy: Checking access prior to firing a real request.\") return True def log_access(self) -> None: print(\"Proxy: Logging the time of request.\", end=\"\") def client_code(subject: Subject) -> None: subject.request() if __name__ == \"__main__\": print(\"Client: Executing the client code with a real subject:\") real_subject = RealSubject() client_code(real_subject) print(\"\") print(\"Client: Executing the same client code with a proxy:\") proxy = Proxy(real_subject) client_code(proxy) Output.txt: Execution result Client: Executing the client code with a real subject: RealSubject: Handling request. Client: Executing the same client code with a proxy: Proxy: Checking access prior to firing a real request. RealSubject: Handling request. Proxy: Logging the time of request.","title":"Proxy"},{"location":"programming/design_patterns/structural_patterns/proxy/#proxy","text":"","title":"Proxy"},{"location":"programming/design_patterns/structural_patterns/proxy/#problem","text":"Why would you want to control access to an object? Here is an example: you have a massive object that consumes a vast amount of system resources. You need it from time to time, but not always. You could implement lazy initialization: create this object only when it\u2019s actually needed. All of the object\u2019s clients would need to execute some deferred initialization code. Unfortunately, this would probably cause a lot of code duplication.","title":"Problem"},{"location":"programming/design_patterns/structural_patterns/proxy/#solution","text":"The Proxy pattern suggests that you create a new proxy class with the same interface as an original service object. Then you update your app so that it passes the proxy object to all of the original object\u2019s clients. Upon receiving a request from a client, the proxy creates a real service object and delegates all the work to it. But what\u2019s the benefit? If you need to execute something either before or after the primary logic of the class, the proxy lets you do this without changing that class. Since the proxy implements the same interface as the original class, it can be passed to any client that expects a real service object.","title":"Solution"},{"location":"programming/design_patterns/structural_patterns/proxy/#code","text":"from abc import ABC, abstractmethod class Subject(ABC): @abstractmethod def request(self) -> None: pass class RealSubject(Subject): def request(self) -> None: print(\"RealSubject: Handling request.\") class Proxy(Subject): def __init__(self, real_subject: RealSubject) -> None: self._real_subject = real_subject def request(self) -> None: if self.check_access(): self._real_subject.request() self.log_access() def check_access(self) -> bool: print(\"Proxy: Checking access prior to firing a real request.\") return True def log_access(self) -> None: print(\"Proxy: Logging the time of request.\", end=\"\") def client_code(subject: Subject) -> None: subject.request() if __name__ == \"__main__\": print(\"Client: Executing the client code with a real subject:\") real_subject = RealSubject() client_code(real_subject) print(\"\") print(\"Client: Executing the same client code with a proxy:\") proxy = Proxy(real_subject) client_code(proxy) Output.txt: Execution result Client: Executing the client code with a real subject: RealSubject: Handling request. Client: Executing the same client code with a proxy: Proxy: Checking access prior to firing a real request. RealSubject: Handling request. Proxy: Logging the time of request.","title":"CODE"}]}